int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        // sort(nums.begin(), nums.end());
        // int target=1;
        // for (int i=0;i<n;i++){
        //     if (nums[i]==target){
        //         target++;
        //     }
        // }
        // return target;

        // vector<bool> present(n+1, false);
        // for (int i : nums){
        //     if (i>0 && i<=n){
        //         present[i]=true;
        //     }
        // }
        // for(int x=1;x<=n;x++){
        //     if (!present[x]) return x;
        // }
        // return n+1;

        // Space Optimized 
        bool Contains1 = false;
        for (int i=0;i<n;i++){
            if (nums[i]==1) Contains1=true;
            if (nums[i]<=0 || nums[i]>n) nums[i]=1;
        }
        if (Contains1==false) return 1;
        for (int i=0;i<n;i++){
            int num = abs(nums[i]);
            int idx = num-1;
            if (nums[idx]<0) continue;
            nums[idx]*=-1;
        }
        for (int i=0;i<nums.size();i++){
            if (nums[i]>0) return i+1;
        }
        return n+1;
