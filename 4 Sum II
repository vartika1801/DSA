// Brute Force - O(n^4)
int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        int count = 0;
        for(int i=0;i<nums1.size();i++){
            for(int j=0;j<nums2.size();j++){
                for(int k=0;k<nums3.size();k++){
                    for(int l=0;l<nums4.size();l++){
                        int total = nums1[i]+nums2[j]+nums3[k]+nums4[l];
                        if (total==0) count++;
                    }
                }
            }
        }
        return count;
    }

// O(n^3)
int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        unordered_map<int, int> mpp;
        for (int i: nums4){
            mpp[i]++;
        }
        int count = 0;
        for(int i=0;i<nums1.size();i++){
            for(int j=0;j<nums2.size();j++){
                for(int k=0;k<nums3.size();k++){
                    int total = nums1[i]+nums2[j]+nums3[k];
                    if (mpp.find(-1*total)!=mpp.end()) count+=mpp[-total];
                }
            }
        }
        return count;
       }

// O(n^2)
int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        unordered_map<int, int> mpp;
        for (int i=0;i<nums3.size();i++){
            for (int j=0;j<nums4.size();j++){
                long long val = nums3[i]+nums4[j];
                mpp[val]++;
            }
        }
        int count = 0;
        for(int i=0;i<nums1.size();i++){
            for(int j=0;j<nums2.size();j++){
                    int total = nums1[i]+nums2[j];
                    if (mpp.find(-1*total)!=mpp.end()) count+=mpp[-total];
                }
            }
        return count;
    }
