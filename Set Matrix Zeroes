// Brute Force --- TC : O(m*n) , SC : O(m+n)
public:
    void setZeroes(vector<vector<int>>& matrix) {
        vector<int> r,c;
        int rows = matrix.size();
        int cols = matrix[0].size();
        for (int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if (matrix[i][j]==0){
                    r.push_back(i);
                    c.push_back(j);
                }
            }
        }
        // traverse this mpp
        for (int i : r){
            for (int j=0;j<cols;j++){
                if (matrix[i][j]!=0) matrix[i][j]=0;
            }
        }
        for (int i=0;i<rows;i++){
            for (int j : c){
                if (matrix[i][j]!=0) matrix[i][j]=0;
            }
        }
    }
};


// Optimal  -- TC : O(m*n) , SC : O(1)
void setZeroes(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        bool firstRowimpacted = false;
        bool firstColimpacted = false;
        // check first row impacted 
        for(int col=0;col<n;col++){
            if (matrix[0][col]==0){
                firstRowimpacted = true;
                break;
            }
        }
        // check first col impacted 
        for(int row=0;row<m;row++){
            if (matrix[row][0]==0){
                firstColimpacted = true;
                break;
            }
        }
        // set markers in first row and col 
        for (int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if (matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        for (int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if (matrix[i][0]==0 || matrix[0][j]==0){
                   matrix[i][j]=0;
                }
            }
        }
        if (firstRowimpacted){
            for (int j=0;j<n;j++){
                matrix[0][j]=0;
            }
        }
        if (firstColimpacted){
            for (int i=0;i<m;i++){
                matrix[i][0]=0;
            }
        }

    }
